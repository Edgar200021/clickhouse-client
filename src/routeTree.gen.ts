/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as CatalogRouteImport } from './routes/catalog'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthVkRouteImport } from './routes/auth/vk'
import { Route as AuthResetPasswordRouteImport } from './routes/auth/reset-password'
import { Route as AuthAccountVerificationRouteImport } from './routes/auth/account-verification'

const PaymentLazyRouteImport = createFileRoute('/payment')()
const DeliveryLazyRouteImport = createFileRoute('/delivery')()
const ContactsLazyRouteImport = createFileRoute('/contacts')()
const ConditionsLazyRouteImport = createFileRoute('/conditions')()
const AuthSignUpLazyRouteImport = createFileRoute('/auth/sign-up')()
const AuthSignInLazyRouteImport = createFileRoute('/auth/sign-in')()
const AuthForgotPasswordLazyRouteImport = createFileRoute(
  '/auth/forgot-password',
)()
const AuthenticatedProfileLazyRouteImport = createFileRoute(
  '/_authenticated/profile',
)()
const AuthenticatedFavoriteLazyRouteImport = createFileRoute(
  '/_authenticated/favorite',
)()
const AuthenticatedBasketLazyRouteImport = createFileRoute(
  '/_authenticated/basket',
)()

const PaymentLazyRoute = PaymentLazyRouteImport.update({
  id: '/payment',
  path: '/payment',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/payment.lazy').then((d) => d.Route))
const DeliveryLazyRoute = DeliveryLazyRouteImport.update({
  id: '/delivery',
  path: '/delivery',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/delivery.lazy').then((d) => d.Route))
const ContactsLazyRoute = ContactsLazyRouteImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/contacts.lazy').then((d) => d.Route))
const ConditionsLazyRoute = ConditionsLazyRouteImport.update({
  id: '/conditions',
  path: '/conditions',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/conditions.lazy').then((d) => d.Route))
const CatalogRoute = CatalogRouteImport.update({
  id: '/catalog',
  path: '/catalog',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignUpLazyRoute = AuthSignUpLazyRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/auth/sign-up.lazy').then((d) => d.Route))
const AuthSignInLazyRoute = AuthSignInLazyRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/auth/sign-in.lazy').then((d) => d.Route))
const AuthForgotPasswordLazyRoute = AuthForgotPasswordLazyRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import('./routes/auth/forgot-password.lazy').then((d) => d.Route),
)
const AuthenticatedProfileLazyRoute =
  AuthenticatedProfileLazyRouteImport.update({
    id: '/profile',
    path: '/profile',
    getParentRoute: () => AuthenticatedRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/profile.lazy').then((d) => d.Route),
  )
const AuthenticatedFavoriteLazyRoute =
  AuthenticatedFavoriteLazyRouteImport.update({
    id: '/favorite',
    path: '/favorite',
    getParentRoute: () => AuthenticatedRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/favorite.lazy').then((d) => d.Route),
  )
const AuthenticatedBasketLazyRoute = AuthenticatedBasketLazyRouteImport.update({
  id: '/basket',
  path: '/basket',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/basket.lazy').then((d) => d.Route),
)
const AuthVkRoute = AuthVkRouteImport.update({
  id: '/vk',
  path: '/vk',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthResetPasswordRoute = AuthResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthAccountVerificationRoute = AuthAccountVerificationRouteImport.update({
  id: '/account-verification',
  path: '/account-verification',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/catalog': typeof CatalogRoute
  '/conditions': typeof ConditionsLazyRoute
  '/contacts': typeof ContactsLazyRoute
  '/delivery': typeof DeliveryLazyRoute
  '/payment': typeof PaymentLazyRoute
  '/auth/account-verification': typeof AuthAccountVerificationRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/vk': typeof AuthVkRoute
  '/basket': typeof AuthenticatedBasketLazyRoute
  '/favorite': typeof AuthenticatedFavoriteLazyRoute
  '/profile': typeof AuthenticatedProfileLazyRoute
  '/auth/forgot-password': typeof AuthForgotPasswordLazyRoute
  '/auth/sign-in': typeof AuthSignInLazyRoute
  '/auth/sign-up': typeof AuthSignUpLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/catalog': typeof CatalogRoute
  '/conditions': typeof ConditionsLazyRoute
  '/contacts': typeof ContactsLazyRoute
  '/delivery': typeof DeliveryLazyRoute
  '/payment': typeof PaymentLazyRoute
  '/auth/account-verification': typeof AuthAccountVerificationRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/vk': typeof AuthVkRoute
  '/basket': typeof AuthenticatedBasketLazyRoute
  '/favorite': typeof AuthenticatedFavoriteLazyRoute
  '/profile': typeof AuthenticatedProfileLazyRoute
  '/auth/forgot-password': typeof AuthForgotPasswordLazyRoute
  '/auth/sign-in': typeof AuthSignInLazyRoute
  '/auth/sign-up': typeof AuthSignUpLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/catalog': typeof CatalogRoute
  '/conditions': typeof ConditionsLazyRoute
  '/contacts': typeof ContactsLazyRoute
  '/delivery': typeof DeliveryLazyRoute
  '/payment': typeof PaymentLazyRoute
  '/auth/account-verification': typeof AuthAccountVerificationRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/vk': typeof AuthVkRoute
  '/_authenticated/basket': typeof AuthenticatedBasketLazyRoute
  '/_authenticated/favorite': typeof AuthenticatedFavoriteLazyRoute
  '/_authenticated/profile': typeof AuthenticatedProfileLazyRoute
  '/auth/forgot-password': typeof AuthForgotPasswordLazyRoute
  '/auth/sign-in': typeof AuthSignInLazyRoute
  '/auth/sign-up': typeof AuthSignUpLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/catalog'
    | '/conditions'
    | '/contacts'
    | '/delivery'
    | '/payment'
    | '/auth/account-verification'
    | '/auth/reset-password'
    | '/auth/vk'
    | '/basket'
    | '/favorite'
    | '/profile'
    | '/auth/forgot-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/catalog'
    | '/conditions'
    | '/contacts'
    | '/delivery'
    | '/payment'
    | '/auth/account-verification'
    | '/auth/reset-password'
    | '/auth/vk'
    | '/basket'
    | '/favorite'
    | '/profile'
    | '/auth/forgot-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/_authenticated'
    | '/catalog'
    | '/conditions'
    | '/contacts'
    | '/delivery'
    | '/payment'
    | '/auth/account-verification'
    | '/auth/reset-password'
    | '/auth/vk'
    | '/_authenticated/basket'
    | '/_authenticated/favorite'
    | '/_authenticated/profile'
    | '/auth/forgot-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  CatalogRoute: typeof CatalogRoute
  ConditionsLazyRoute: typeof ConditionsLazyRoute
  ContactsLazyRoute: typeof ContactsLazyRoute
  DeliveryLazyRoute: typeof DeliveryLazyRoute
  PaymentLazyRoute: typeof PaymentLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/payment': {
      id: '/payment'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof PaymentLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/delivery': {
      id: '/delivery'
      path: '/delivery'
      fullPath: '/delivery'
      preLoaderRoute: typeof DeliveryLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contacts': {
      id: '/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof ContactsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conditions': {
      id: '/conditions'
      path: '/conditions'
      fullPath: '/conditions'
      preLoaderRoute: typeof ConditionsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/catalog': {
      id: '/catalog'
      path: '/catalog'
      fullPath: '/catalog'
      preLoaderRoute: typeof CatalogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpLazyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInLazyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordLazyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileLazyRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/favorite': {
      id: '/_authenticated/favorite'
      path: '/favorite'
      fullPath: '/favorite'
      preLoaderRoute: typeof AuthenticatedFavoriteLazyRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/basket': {
      id: '/_authenticated/basket'
      path: '/basket'
      fullPath: '/basket'
      preLoaderRoute: typeof AuthenticatedBasketLazyRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/auth/vk': {
      id: '/auth/vk'
      path: '/vk'
      fullPath: '/auth/vk'
      preLoaderRoute: typeof AuthVkRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/account-verification': {
      id: '/auth/account-verification'
      path: '/account-verification'
      fullPath: '/auth/account-verification'
      preLoaderRoute: typeof AuthAccountVerificationRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthAccountVerificationRoute: typeof AuthAccountVerificationRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
  AuthVkRoute: typeof AuthVkRoute
  AuthForgotPasswordLazyRoute: typeof AuthForgotPasswordLazyRoute
  AuthSignInLazyRoute: typeof AuthSignInLazyRoute
  AuthSignUpLazyRoute: typeof AuthSignUpLazyRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthAccountVerificationRoute: AuthAccountVerificationRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthVkRoute: AuthVkRoute,
  AuthForgotPasswordLazyRoute: AuthForgotPasswordLazyRoute,
  AuthSignInLazyRoute: AuthSignInLazyRoute,
  AuthSignUpLazyRoute: AuthSignUpLazyRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface AuthenticatedRouteChildren {
  AuthenticatedBasketLazyRoute: typeof AuthenticatedBasketLazyRoute
  AuthenticatedFavoriteLazyRoute: typeof AuthenticatedFavoriteLazyRoute
  AuthenticatedProfileLazyRoute: typeof AuthenticatedProfileLazyRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedBasketLazyRoute: AuthenticatedBasketLazyRoute,
  AuthenticatedFavoriteLazyRoute: AuthenticatedFavoriteLazyRoute,
  AuthenticatedProfileLazyRoute: AuthenticatedProfileLazyRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  CatalogRoute: CatalogRoute,
  ConditionsLazyRoute: ConditionsLazyRoute,
  ContactsLazyRoute: ContactsLazyRoute,
  DeliveryLazyRoute: DeliveryLazyRoute,
  PaymentLazyRoute: PaymentLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
